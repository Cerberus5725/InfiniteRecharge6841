package frc.robot.subsystems;

import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.command.Subsystem;
import frc.robot.Robot;
import frc.robot.commands.DriveTrainCode;

public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private Spark leftFrontMotor;
private Spark leftBackMotor;
private Spark rightFrontMotor;
private Spark rightBackMotor;

private RobotDrive robotDrive21;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public DriveTrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
leftFrontMotor = new Spark(0);
addChild("LeftSpeed",leftFrontMotor);
leftFrontMotor.setInverted(false);

leftBackMotor = new Spark(1);
addChild("LeftSpeed",leftBackMotor);
leftBackMotor.setInverted(false); 

rightFrontMotor = new Spark(2);
addChild("RightSpeed",rightFrontMotor);
rightFrontMotor.setInverted(false);

rightBackMotor = new Spark(3);
addChild("RightSpeed",rightBackMotor);
rightBackMotor.setInverted(false);

        
robotDrive21 = new RobotDrive(leftFrontMotor, leftBackMotor, rightFrontMotor, rightBackMotor);

robotDrive21.setSafetyEnabled(true);
robotDrive21.setExpiration(0.1);
robotDrive21.setSensitivity(0.5);
robotDrive21.setMaxOutput(1.0);

        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new DriveTrainCode());

            // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());

    }


    public void driveWithJoysticks(double joystickX, double joystickY, double dSpeed)
	{

        double LeftSpeed;
        double RightSpeed;
        LeftSpeed = (joystickX + joystickY) *dSpeed;
        LeftSpeed = (joystickX + joystickY) *dSpeed;
        RightSpeed = (-joystickX + joystickY) *dSpeed;
        RightSpeed = (-joystickX + joystickY) *dSpeed;
        if(LeftSpeed >= 1.0)
        {
            LeftSpeed = 1.0;
        }
        if(LeftSpeed >= 1.0)
        {
            LeftSpeed = 1.0;
        }
        if(RightSpeed >= 1.0)
        {
            RightSpeed = 1.0;
        }
        if(RightSpeed >= 1.0)
        {
            RightSpeed = 1.0;
        }
        leftFrontMotor.set(LeftSpeed);
        //leftBackMotor.set(LeftSpeed);
        rightFrontMotor.set(RightSpeed);
        //rightBackMotor.set(RightSpeed);
    }
    
    public void stop()
    {
        leftFrontMotor.set(0);
        leftBackMotor.set(0);
        rightFrontMotor.set(0);
        rightBackMotor.set(0);
    }


}
